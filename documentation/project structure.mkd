## Project Structure

Excluding testing packages, the application is divided into five packages.
![](https://github.com/RadicalOyster/pathfinding-comparisons/blob/main/documentation/images/package%20diagram.png)

* Domain contains the Node class, which the algorithms and data structures are
dependent on.
* Algorithms contains all three pathfinding algorithms.
* Data structures contains the MazeNodeList and NodeHeap data structures, which
implement list and heap functionality for use with the algorithms.
* Ui contains the graphical user interface.
* Main contains only the main class, which immediately launches the gui.

## Space and time complexities

### Data structures

#### MazeNodeList
MazeNodeList contains a single array of nodes and a size variable.

add() simply adds a node to the next empty spot in the array, which has a
time complexity of O(1). If the lists' current capcity is exceeded, elements
need to be copied  over to a new array, which has a time complexity of O(N), but
this operation does not need to be performed very often. The space complexity of
this operation is O(n).

#### NodeHeap
NodeHeap also contains a single array of nodes and a size variable.

* add() is on average O(1) and when the array needs to be expanded, O(N).

* pollLast(), peekLast() and size() have a time complexity of O(1) as they only peform
simple operations such as assigning variables and reading data from an array.

* contains() has a time complexity of O(n) as it iterates through the array until
it finds the value it needs. This could be improved with a more sensible search
method.

* insert() has a worst case time complexity of O(logn), as the loop iterates over the tree
one level at a time and the amount of nodes on each level is roughly half of the nodes on the
next. On average, this operation turns out to only have a time complexity of O(1), however.

#### Algorithms

#### Dijkstra

With Dijkstra's algorithm, the target time complexity of O(V + E logV) has been reached. Likewise the required amount of memory is directly proportional to the number of nodes, giving us a space complexity of O(N) which was our target.

### A*

A* is virtually identical to Dijkstra's with the exception of a heuristic being added to the node cost. In this case, as we don't allow diagonal movement, the heuristic used is the manhattan distance between the current node and the destination node. The heuristic itself has a time complexity of O(1) and guides the algorithm to choose better nodes to explore, which if the heuristic is sensible, should make the algorithm more time efficient. In practice based on testing, however, A* ended up being slower than Dijsktra's in some cases. This leads me to believe that the heuristic here is not optimal, as theoretically A* should not be slower than Dijkstra's if the heuristic has been chosen correctly. 

### IDA*

Based on my testing, IDA* appears to be performing slightly slower than A* on average, but is roughly on par. This is about as expected. It does, however, take up less space while running as it only keeps the currently explored path in memory at any given time, unlike Dijkstra and A*, which both keep a growing heap of nodes in memory at all times.

## Improvements

* There is quite a bit of a repeat code, especially between A* and Dijkstra, which could be cut down
 * This could be solved with inheritance
* As I alluded to earlier, different heuristics should be explored to see if the performance of A* and IDA* could be improved